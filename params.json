{"name":"Node-mongoskin","body":"Introduction\r\n========\r\n\r\n* This project is a wrapper of node-mongodb-native\r\n\r\nRead [node-mongodb-native document](http://christkv.github.com/node-mongodb-native/) first.\r\n\r\n* How to validate input?\r\n\r\nI wrote a middleware to validate post data, [node-iform](https://github.com/guileen/node-iform) \r\nbase on [node-validator](https://github.com/chriso/node-validator)\r\n\r\n* install\r\n\r\n    npm install mongoskin\r\n\r\nQuick Start\r\n========\r\n\r\nYou can connect to mongodb easier now.\r\n\r\n    var mongo = require('mongoskin');\r\n    mongo.db('localhost:27017/testdb').collection('blog').find().toArray(function(err, items){\r\n        console.dir(items);\r\n    })\r\n\r\nYou can also set `auto_reconnect` options querystring.\r\nAnd native_parser options will automatically set if native_parser is avariable.\r\n\r\n    var mongo = require('mongoskin'),\r\n        db = mongo.db('localhost:27017/test?auto_reconnect');\r\n\r\nYou can do everything that node-mongodb-native can do.\r\n\r\n    db.createCollection(...);\r\n    db.collection('user').ensureIndex([['username', 1]], true, function(err, replies){});\r\n    db.collection('posts').hint = 'slug';\r\n    db.collection('posts').findOne({slug: 'whats-up'}, function(err, post){\r\n        // do something\r\n    });\r\n\r\nFind return cursor\r\n\r\n    db.collection('posts').find().toArray(function(err, posts){\r\n        // do something\r\n    });\r\n\r\n\r\nYou can bind **additional methods** for collection.\r\nIt is very useful if you want to use MVC patterns with nodejs and mongodb.\r\nYou can also invoke collection by properties after bind.\r\n\r\n    db.bind('posts', {\r\n       findTop10 : function(fn){\r\n         this.find({}, {limit:10, sort:[['views', -1]]}).toArray(fn);\r\n       },\r\n       removeTagWith : function(tag, fn){\r\n         this.remove({tags:tag},fn);\r\n       }\r\n    });\r\n\r\n    db.bind('comments');\r\n\r\n    db.collection('posts').removeTagWith('delete', function(err, replies){\r\n      //do something\r\n    });\r\n\r\n    db.posts.findTop10(function(err, topPosts){\r\n      //do something\r\n    });\r\n\r\n    db.comments.find().toArray(function(err, comments){\r\n      //do something\r\n    });\r\n\r\nAPI\r\n========\r\n\r\nModule\r\n--------\r\n\r\n### MongoSkin Url format\r\n\r\n    [*://][username:password@]host[:port][/database][?auto_reconnect[=true|false]]`\r\n\r\ne.g.\r\n\r\n    localhost/blog\r\n    mongo://admin:pass@127.0.0.1:27017/blog?auto_reconnect\r\n    127.0.0.1?auto_reconnect=false\r\n\r\n### db(databaseUrl, db_options)\r\n\r\nGet or create instance of [SkinDb](#skindb).\r\n\r\n    var db = mongoskin.db('localhost:27017/testdb?auto_reconnect=true&poolSize=5');\r\n\r\nfor ReplSet server\r\n\r\n    var db = mongoskin.db(['192.168.0.1:27017/?auto_reconnect=true',\r\n                '192.168.0.2:27017/?auto_reconnect=true',\r\n                '192.168.0.3:27017/?auto_reconnect=true'],\r\n                {\r\n                    database: 'testdb',\r\n                    retryMiliSeconds: 2000\r\n                })\r\n\r\n### router(select)\r\n\r\nselect is function(collectionName) returns a database instance, means router collectionName to that database.\r\n\r\n    var db = mongo.router(function(coll_name){\r\n        switch(coll_name) {\r\n        case 'user':\r\n        case 'message':\r\n          return mongo.db('192.168.1.3/auth_db');\r\n        default:\r\n          return mongo.db('192.168.1.2/app_db');\r\n        }\r\n    });\r\n    db.bind('user', require('./shared-user-methods'));\r\n    var users = db.user; //auth_db.user\r\n    var messages = db.collection('message'); // auth_db.message\r\n    var products = db.collection('product'); //app_db.product\r\n\r\n### classes extends frome node-mongodb-native\r\n\r\nyou can access all mongodb class, `mongoskin.DBRef` equals `mongodb.DBRef`.\r\n\r\nSkinServer\r\n--------\r\n\r\n### SkinServer(server)\r\n\r\nConstruct SkinServer from native Server instance.\r\n\r\n### db(dbname, username=null, password=null)\r\n\r\nConstruct [SkinDb](#skindb) from SkinServer.\r\n\r\nSkinDb\r\n--------\r\n\r\n### SkinDb(db, username=null, password=null)\r\n\r\nConstruct SkinDb.\r\n\r\n### open(callback)\r\n\r\nConnect to database, retrieval native\r\n[Db](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/db.js#L17)\r\ninstance, callback is function(err, db).\r\n\r\n### collection(collectionName)\r\n\r\nRetrieval [SkinCollection](#skincollection) instance of specified collection name.\r\n\r\n<a name='skindb-bind'>\r\n\r\n### bind(collectionName)\r\n\r\n### bind(collectionName, SkinCollection)\r\n\r\n### bind(collectionName, extendObject1, extendObject2 ...)\r\n\r\nBind [SkinCollection](#skincollection) to db properties as a shortcut to db.collection(name).\r\nYou can also bind additional methods to the SkinCollection, it is useful when\r\nyou want to reuse a complex operation. This will also affect\r\ndb.collection(name) method.\r\n\r\ne.g.\r\n\r\n    db.bind('book', {\r\n        firstBook: function(fn){\r\n            this.findOne(fn);\r\n        }\r\n    });\r\n    db.book.firstBook(function(err, book){});\r\n\r\n### all the methods from Db.prototype\r\n\r\nSee [Db](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/db.js#L17) of node-mongodb-native for more information.\r\n\r\nSkinCollection\r\n--------\r\n\r\nSee [Collection](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L45) of node-mongodb-native for more information.\r\n\r\n<a name='additional-collection-op'>\r\n### open(callback)\r\n\r\nRetrieval native\r\n[Collection](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L45)\r\ninstance, callback is function(err, collection).\r\n\r\n### id(hex)\r\n\r\nEquivalent to\r\n\r\n    db.bson_serializer.ObjectID.createFromHexString(hex);\r\n\r\nSee [ObjectID.createFromHexString](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/bson/bson.js#L548)\r\n\r\n\r\n<a name='inherit-collection-op'>\r\n\r\n### Collection operation\r\n\r\n    checkCollectionName(collectionName)\r\n    options(callback)\r\n    rename(collectionName, callback)\r\n    drop(callback)\r\n\r\n<a name='inherit-indexes'>\r\n\r\n### Indexes\r\n\r\n    createIndex (fieldOrSpec, unique, callback)\r\n    ensureIndex (fieldOrSpec, unique, callback)\r\n    indexInformation (callback)\r\n    dropIndex (indexName, callback)\r\n    dropIndexes (callback)\r\n    \r\nSee [mongodb-native indexes](https://github.com/christkv/node-mongodb-native/blob/master/docs/indexes.md)\r\n\r\n<a name='inherit-query'>\r\n\r\n### Queries\r\n\r\nSee [mongodb-native queries](https://github.com/christkv/node-mongodb-native/blob/master/docs/queries.md)\r\n\r\n#### findItems(..., callback)\r\n\r\nEquivalent to\r\n\r\n    collection.find(..., function(err, cursor){\r\n        cursor.toArray(callback);\r\n    });\r\n\r\nSee [Collection.find](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L348)\r\n\r\n#### findEach(..., callback)\r\n\r\nEquivalent to\r\n\r\n    collection.find(..., function(err, cursor){\r\n        cursor.each(callback);\r\n    });\r\n\r\nSee [Collection.find](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L348)\r\n\r\n#### findById(id, ..., callback)\r\n\r\nEquivalent to\r\n\r\n    collection.findOne({_id, ObjectID.createFromHexString(id)}, ..., callback);\r\n\r\nSee [Collection.findOne](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L417)\r\n\r\n#### find(...)\r\n\r\nIf the last parameter is function, it is equivalent to native\r\n[Collection.find](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/collection.js#L348)\r\nmethod, else it will return a future [SkinCursor](#skincursor).\r\n\r\ne.g.\r\n\r\n    // callback\r\n    db.book.find({}, function(err, cursor){/* do something */});\r\n    // future SkinCursor\r\n    db.book.find().toArray(function(err, books){/* do something */});\r\n\r\n\r\n\r\n#### normalizeHintField(hint)\r\n\r\n#### find\r\n\r\n    /**\r\n     * Various argument possibilities\r\n     * 1 callback\r\n     * 2 selector, callback,\r\n     * 2 callback, options  // really?!\r\n     * 3 selector, fields, callback\r\n     * 3 selector, options, callback\r\n     * 4,selector, fields, options, callback\r\n     * 5 selector, fields, skip, limit, callback\r\n     * 6 selector, fields, skip, limit, timeout, callback\r\n     *\r\n     * Available options:\r\n     * limit, sort, fields, skip, hint, explain, snapshot, timeout, tailable, batchSize\r\n     */\r\n\r\n#### findAndModify(query, sort, update, options, callback) \r\n\r\n    /**\r\n      Fetch and update a collection\r\n      query:        a filter for the query\r\n      sort:         if multiple docs match, choose the first one in the specified sort order as the object to manipulate\r\n      update:       an object describing the modifications to the documents selected by the query\r\n      options:\r\n        remove:   set to a true to remove the object before returning\r\n        new:      set to true if you want to return the modified object rather than the original. Ignored for remove.\r\n        upsert:       true/false (perform upsert operation)\r\n    **/\r\n\r\n#### findOne(queryObject, options, callback)\r\n\r\n<a name='inherit-aggregation'>\r\n\r\n### Aggregation\r\n\r\n#### mapReduce(map, reduce, options, callback)\r\n\r\n    e.g.  ```\r\n      var map = function(){\r\n          emit(test(this.timestamp.getYear()), 1);\r\n      }\r\n      \r\n      var reduce = function(k, v){\r\n          count = 0;\r\n          for(i = 0; i < v.length; i++) {\r\n              count += v[i];\r\n          }\r\n          return count;\r\n      }\r\n      collection.mapReduce(map, reduce, {scope:{test:new client.bson_serializer.Code(t.toString())}}, function(err, collection) {\r\n        collection.find(function(err, cursor) {\r\n              cursor.toArray(function(err, results) {\r\n              test.equal(2, results[0].value)\r\n              finished_test({test_map_reduce_functions_scope:'ok'});            \r\n          })\r\n        })\r\n          ```\r\n\r\n#### group(keys, condition, initial, reduce, command, callback)\r\n\r\n    e.g.  `collection.group([], {}, {\"count\":0}, \"function (obj, prev) { prev.count++; }\", true, function(err, results) {`\r\n\r\n#### count(query, callback)\r\n#### distinct(key, query, callback)\r\n\r\n<a name='inherit-inserting'>\r\n\r\n### Inserting\r\n\r\n#### insert(docs, options, callback)\r\n\r\n<a name='inherit-updating'>\r\n\r\n### Updating\r\n\r\n#### save(doc, options, callback)\r\n\r\n    /**\r\n      Update a single document in this collection.\r\n        spec - a associcated array containing the fields that need to be present in\r\n          the document for the update to succeed\r\n\r\n        document - an associated array with the fields to be updated or in the case of\r\n          a upsert operation the fields to be inserted.\r\n\r\n      Options:\r\n        upsert - true/false (perform upsert operation)\r\n        multi - true/false (update all documents matching spec)\r\n        safe - true/false (perform check if the operation failed, required extra call to db)\r\n    **/\r\n\r\n#### update(spec, document, options, callback)\r\n\r\n#### updateById(_id, ..., callback)\r\n\r\nEquivalent to\r\n\r\n    collection.update({_id, ObjectID.createFromHexString(id)}, ..., callback);\r\n\r\nSee [Collection.update](https://github.com/christkv/node-mongodb-native/blob/master/docs/insert.md)\r\n\r\n\r\n<a name='inherit-removing'>\r\n\r\n### Removing\r\n\r\n#### remove(selector, options, callback)\r\n\r\n#### removeById(_id, options, callback)\r\n\r\n[Back to index](#index)\r\n\r\n<a name='skincursor'>\r\n\r\nSkinCursor\r\n---------\r\n\r\nSee [Cursor](https://github.com/christkv/node-mongodb-native/blob/master/lib/mongodb/cursor.js#L1)\r\nof node-mongodb-native for more information.\r\n\r\nAll these methods will return the SkinCursor itself.\r\n\r\n    sort(keyOrList, [direction], [callback])\r\n    limit(limit, [callback])\r\n    skip(skip, [callback])\r\n    batchSize(skip, [callback])\r\n\r\n    toArray(callback)\r\n    each(callback)\r\n    count(callback)\r\n    nextObject(callback)\r\n    getMore(callback)\r\n    explain(callback)\r\n","tagline":"The future layer for node-mongodb-native.","google":"UA-31429524-1","note":"Don't delete this file! It's used internally to help with page regeneration."}